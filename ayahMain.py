# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ayahMain.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QFileDialog, QLabel, QTextEdit
from PyQt5.QtGui import QPixmap
import cv2
from cv2 import *
from matplotlib.pyplot import *
import sys
import numpy as np
from numpy import *
import numpy as np
from random import randint
from matplotlib import pyplot as plt
import pygame , sys
from PIL import Image

from crop import *
from filtrage import *
from Morphologie import *
from contour import *
from segmentation import *

class Ui_MainWindow(object):
    path = 'hello'
    #saveImage = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(785, 582)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label_angle = QtWidgets.QLabel(self.centralwidget)
        self.label_angle.setGeometry(QtCore.QRect(190, 30, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.label_angle.setFont(font)
        self.label_angle.setObjectName("label_angle")

        self.angle = QtWidgets.QTextEdit(self.centralwidget)
        self.angle.setGeometry(QtCore.QRect(320, 30, 111, 31))
        self.angle.setObjectName("angle")

        self.button_rotation = QtWidgets.QPushButton(self.centralwidget)
        self.button_rotation.setGeometry(QtCore.QRect(460, 30, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setBold(True)
        font.setWeight(75)
        self.button_rotation.setFont(font)
        self.button_rotation.setObjectName("button_rotation")

        self.label_taille = QtWidgets.QLabel(self.centralwidget)
        self.label_taille.setGeometry(QtCore.QRect(190, 90, 121, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.label_taille.setFont(font)
        self.label_taille.setObjectName("label_taille")

        self.taille = QtWidgets.QTextEdit(self.centralwidget)
        self.taille.setGeometry(QtCore.QRect(320, 80, 111, 31))
        self.taille.setObjectName("taille")

        self.redimensionner = QtWidgets.QPushButton(self.centralwidget)
        self.redimensionner.setGeometry(QtCore.QRect(460, 80, 131, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.redimensionner.setFont(font)
        self.redimensionner.setObjectName("redimensionner")

        self.line_h = QtWidgets.QFrame(self.centralwidget)
        self.line_h.setGeometry(QtCore.QRect(110, 120, 561, 20))
        self.line_h.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_h.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_h.setObjectName("line_h")

        self.button_selection = QtWidgets.QPushButton(self.centralwidget)
        self.button_selection.setGeometry(QtCore.QRect(200, 150, 151, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.button_selection.setFont(font)
        self.button_selection.setObjectName("button_selection")

        self.button_hist = QtWidgets.QPushButton(self.centralwidget)
        self.button_hist.setGeometry(QtCore.QRect(450, 150, 151, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.button_hist.setFont(font)
        self.button_hist.setObjectName("button_hist")

        self.line_h2 = QtWidgets.QFrame(self.centralwidget)
        self.line_h2.setGeometry(QtCore.QRect(110, 190, 561, 20))
        self.line_h2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_h2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_h2.setObjectName("line_h2")

        self.line_v = QtWidgets.QFrame(self.centralwidget)
        self.line_v.setGeometry(QtCore.QRect(390, 210, 20, 320))  #271==> 350
        self.line_v.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_v.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_v.setObjectName("line_v")

        self.label_img_org = QtWidgets.QLabel(self.centralwidget)
        self.label_img_org.setGeometry(QtCore.QRect(110, 220, 101, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.label_img_org.setFont(font)
        self.label_img_org.setObjectName("label_img_org")

        self.label_resultat = QtWidgets.QLabel(self.centralwidget)
        self.label_resultat.setGeometry(QtCore.QRect(450, 220, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.label_resultat.setFont(font)
        self.label_resultat.setObjectName("label_resultat")

        self.label_affch_img = QtWidgets.QLabel(self.centralwidget)
        self.label_affch_img.setGeometry(QtCore.QRect(90, 250, 321, 251))
        self.label_affch_img.setObjectName("label_affch_img")

        self.label_affch_rslt = QtWidgets.QLabel(self.centralwidget)
        self.label_affch_rslt.setGeometry(QtCore.QRect(420, 250, 371, 251))
        self.label_affch_rslt.setObjectName("label_affch_rslt")

        self.image_hist = QtWidgets.QPushButton(self.centralwidget)
        self.image_hist.setGeometry(QtCore.QRect(475, 510, 271, 23))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.image_hist.setFont(font)
        self.image_hist.setObjectName("image_hist")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 785, 21))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuTraitement_d_une_image = QtWidgets.QMenu(self.menubar)
        self.menuTraitement_d_une_image.setObjectName("menuTraitement_d_une_image")
        self.menuBinarisation = QtWidgets.QMenu(self.menubar)
        self.menuBinarisation.setObjectName("menuBinarisation")
        self.menuFiltrage = QtWidgets.QMenu(self.menubar)
        self.menuFiltrage.setObjectName("menuFiltrage")
        self.menuGaussien = QtWidgets.QMenu(self.menuFiltrage)
        self.menuGaussien.setObjectName("menuGaussien")
        self.menuMoyenneur = QtWidgets.QMenu(self.menuFiltrage)
        self.menuMoyenneur.setObjectName("menuMoyenneur")
        self.menuMedian = QtWidgets.QMenu(self.menuFiltrage)
        self.menuMedian.setObjectName("menuMedian")
        self.menuContours = QtWidgets.QMenu(self.menubar)
        self.menuContours.setObjectName("menuContours")
        self.menumorphologie_math_matique = QtWidgets.QMenu(self.menubar)
        self.menumorphologie_math_matique.setObjectName("menumorphologie_math_matique")
        self.menuSegmentation = QtWidgets.QMenu(self.menubar)
        self.menuSegmentation.setObjectName("menuSegmentation")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionOuvrir = QtWidgets.QAction(MainWindow)
        self.actionOuvrir.setObjectName("actionOuvrir")
        self.actionOuvrir.triggered.connect(self.getimage)

        #self.actionEnregistrer_img = QtWidgets.QAction(MainWindow)
        #self.actionEnregistrer_img.setObjectName("actionEnregistrer_img")
        #self.actionEnregistrer_img.triggered.connect(self.save)

        self.actionFermer = QtWidgets.QAction(MainWindow)
        self.actionFermer.setObjectName("actionFermer")
        self.actionFermer.triggered.connect(self.close_application)

        self.actionImage_N_gative = QtWidgets.QAction(MainWindow)
        self.actionImage_N_gative.setObjectName("actionImage_N_gative")
        self.actionImage_N_gative.triggered.connect(self.show_negative)

        self.actionEgalisation = QtWidgets.QAction(MainWindow)
        self.actionEgalisation.setObjectName("actionEgalisation")
        self.actionEgalisation.triggered.connect(self.egalisation)

        self.actionEtirement = QtWidgets.QAction(MainWindow)
        self.actionEtirement.setObjectName("actionEtirement")
        self.actionEtirement.triggered.connect(self.etirement)

        self.actionSeuillage_manuel = QtWidgets.QAction(MainWindow)
        self.actionSeuillage_manuel.setObjectName("actionSeuillage_manuel")
        self.actionSeuillage_manuel.triggered.connect(self.binarise)

        self.actionAlgorithme_d_Otsu = QtWidgets.QAction(MainWindow)
        self.actionAlgorithme_d_Otsu.setObjectName("actionAlgorithme_d_Otsu")
        self.actionAlgorithme_d_Otsu.triggered.connect(self.otsu)

        self.actionS_0_1 = QtWidgets.QAction(MainWindow)
        self.actionS_0_1.setObjectName("actionS_0_1")
        self.actionS_0_8 = QtWidgets.QAction(MainWindow)
        self.actionS_0_8.setObjectName("actionS_0_8")
        self.action_moy_3_3 = QtWidgets.QAction(MainWindow)
        self.action_moy_3_3.setObjectName("action_moy_3_3")
        self.action_moy_5_5 = QtWidgets.QAction(MainWindow)
        self.action_moy_5_5.setObjectName("action_moy_5_5")
        self.action_moy_7_7 = QtWidgets.QAction(MainWindow)
        self.action_moy_7_7.setObjectName("action_moy_7_7")
        self.action_med_3_3 = QtWidgets.QAction(MainWindow)
        self.action_med_3_3.setObjectName("action_med_3_3")
        self.action_med_5_5 = QtWidgets.QAction(MainWindow)
        self.action_med_5_5.setObjectName("action_med_5_5")

        self.actionGradient = QtWidgets.QAction(MainWindow)
        self.actionGradient.setObjectName("actionGradient")
        self.actionGradient.triggered.connect(self.grad)

        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setObjectName("actionSobel")
        self.actionRobinson = QtWidgets.QAction(MainWindow)
        self.actionRobinson.setObjectName("actionRobinson")

        self.actionLaplacien = QtWidgets.QAction(MainWindow)
        self.actionLaplacien.setObjectName("actionLaplacien")
        self.actionLaplacien.triggered.connect(self.laplacien)

        self.actionErosion = QtWidgets.QAction(MainWindow)
        self.actionErosion.setObjectName("actionErosion")
        self.actionErosion.triggered.connect(self.Erosion)

        self.actionDilatation = QtWidgets.QAction(MainWindow)
        self.actionDilatation.setObjectName("actionDilatation")
        self.actionOuverture = QtWidgets.QAction(MainWindow)
        self.actionOuverture.setObjectName("actionOuverture")
        self.actionFermeture = QtWidgets.QAction(MainWindow)
        self.actionFermeture.setObjectName("actionFermeture")
        self.actionCroissance_Reg = QtWidgets.QAction(MainWindow)
        self.actionCroissance_Reg.setObjectName("actionCroissance_Reg")
        self.actionPartition_Reg = QtWidgets.QAction(MainWindow)
        self.actionPartition_Reg.setObjectName("actionPartition_Reg")
        self.actionMeth_k_means = QtWidgets.QAction(MainWindow)
        self.actionMeth_k_means.setObjectName("actionMeth_k_means")
        self.menuFile.addAction(self.actionOuvrir)
        #self.menuFile.addAction(self.actionEnregistrer_img)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionFermer)
        self.menuTraitement_d_une_image.addAction(self.actionImage_N_gative)
        self.menuTraitement_d_une_image.addAction(self.actionEgalisation)
        self.menuTraitement_d_une_image.addAction(self.actionEtirement)
        self.menuBinarisation.addAction(self.actionSeuillage_manuel)
        self.menuBinarisation.addAction(self.actionAlgorithme_d_Otsu)
        self.menuGaussien.addAction(self.actionS_0_1)
        self.menuGaussien.addAction(self.actionS_0_8)
        self.menuMoyenneur.addAction(self.action_moy_3_3)
        self.menuMoyenneur.addAction(self.action_moy_5_5)
        self.menuMoyenneur.addAction(self.action_moy_7_7)
        self.menuMedian.addAction(self.action_med_3_3)
        self.menuMedian.addAction(self.action_med_5_5)
        self.menuFiltrage.addAction(self.menuGaussien.menuAction())
        self.menuFiltrage.addAction(self.menuMoyenneur.menuAction())
        self.menuFiltrage.addAction(self.menuMedian.menuAction())
        self.menuContours.addAction(self.actionGradient)
        self.menuContours.addAction(self.actionSobel)
        self.menuContours.addAction(self.actionRobinson)
        self.menuContours.addAction(self.actionLaplacien)
        self.menumorphologie_math_matique.addAction(self.actionErosion)
        self.menumorphologie_math_matique.addAction(self.actionDilatation)
        self.menumorphologie_math_matique.addAction(self.actionOuverture)
        self.menumorphologie_math_matique.addAction(self.actionFermeture)
        self.menuSegmentation.addAction(self.actionCroissance_Reg)
        self.menuSegmentation.addAction(self.actionPartition_Reg)
        self.menuSegmentation.addAction(self.actionMeth_k_means)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuTraitement_d_une_image.menuAction())
        self.menubar.addAction(self.menuBinarisation.menuAction())
        self.menubar.addAction(self.menuFiltrage.menuAction())
        self.menubar.addAction(self.menuContours.menuAction())
        self.menubar.addAction(self.menumorphologie_math_matique.menuAction())
        self.menubar.addAction(self.menuSegmentation.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    #cette fonction est générée par le pyqt5
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_angle.setText(_translate("MainWindow", "Donner un angle :"))
        self.button_rotation.setText(_translate("MainWindow", "Rotation"))
        self.button_rotation.clicked.connect(self.show_rotation)
        self.label_taille.setText(_translate("MainWindow", "Donner une taille(%) : "))
        self.redimensionner.setText(_translate("MainWindow", "Redimentionnement"))
        self.redimensionner.clicked.connect(self.show_redimension)
        self.button_selection.setText(_translate("MainWindow", "Sélectionner une zone"))
        self.button_selection.clicked.connect(self.show_zone)
        self.button_hist.setText(_translate("MainWindow", "Afficher l\'histogramme"))
        self.button_hist.clicked.connect(self.histo)
        self.label_img_org.setText(_translate("MainWindow", "Image Originale :"))
        self.label_resultat.setText(_translate("MainWindow", "Résultat : "))
        #self.label_affch_img.setText(_translate("MainWindow", "afficher_img"))
        #self.label_affch_rslt.setText(_translate("MainWindow", "afficher_rslt"))
        self.image_hist.setText(_translate("MainWindow", "Afficher"))
        self.image_hist.setVisible(0)
        self.menuFile.setTitle(_translate("MainWindow", "Fichier"))
        self.menuTraitement_d_une_image.setTitle(_translate("MainWindow", "Traitement  "))
        self.menuBinarisation.setTitle(_translate("MainWindow", "Binarisation"))
        self.menuFiltrage.setTitle(_translate("MainWindow", "Filtrage"))
        self.menuGaussien.setTitle(_translate("MainWindow", "Gaussien"))
        self.menuMoyenneur.setTitle(_translate("MainWindow", "Moyenneur"))
        self.menuMedian.setTitle(_translate("MainWindow", "Médian"))
        self.menuContours.setTitle(_translate("MainWindow", "Contours"))
        self.menumorphologie_math_matique.setTitle(_translate("MainWindow", "Morphologie Mathématique"))
        self.menuSegmentation.setTitle(_translate("MainWindow", "Ségmentation"))
        self.actionOuvrir.setText(_translate("MainWindow", "Ouvrir une image"))
        self.actionOuvrir.setToolTip(_translate("MainWindow", "<html><head/><body><p>Ouvrir une image</p></body></html>"))
        #self.actionEnregistrer_img.setText(_translate("MainWindow", "Enregistrer l\'image"))
        self.actionFermer.setText(_translate("MainWindow", "Fermer"))
        self.actionImage_N_gative.setText(_translate("MainWindow", "Image Négative"))
        self.actionEgalisation.setText(_translate("MainWindow", "Egalisation"))
        self.actionEtirement.setText(_translate("MainWindow", "Etirement"))
        self.actionSeuillage_manuel.setText(_translate("MainWindow", "Seuillage manuel"))
        self.actionAlgorithme_d_Otsu.setText(_translate("MainWindow", "Algorithme d’Otsu"))
        self.actionS_0_1.setText(_translate("MainWindow", "S = 0.1"))
        self.actionS_0_1.triggered.connect(self.gaussian1)
        self.actionS_0_8.setText(_translate("MainWindow", "S = 0.8"))
        self.actionS_0_8.triggered.connect(self.gaussian8)
        self.action_moy_3_3.setText(_translate("MainWindow", "d = 3*3"))
        self.action_moy_3_3.triggered.connect(self.Moyenneur3)
        self.action_moy_5_5.setText(_translate("MainWindow", "d = 5*5"))
        self.action_moy_5_5.triggered.connect(self.Moyenneur5)
        self.action_moy_7_7.setText(_translate("MainWindow", "d = 7*7"))
        self.action_moy_7_7.triggered.connect(self.Moyenneur7)
        self.action_med_3_3.setText(_translate("MainWindow", "d = 3*3"))
        self.action_med_3_3.triggered.connect(self.median3)
        self.action_med_5_5.setText(_translate("MainWindow", "d = 5*5"))
        self.action_med_5_5.triggered.connect(self.median5)
        self.actionGradient.setText(_translate("MainWindow", "Gradient"))
        self.actionSobel.setText(_translate("MainWindow", "Sobel"))
        self.actionSobel.triggered.connect(self.Sobel)
        self.actionRobinson.setText(_translate("MainWindow", "Robinson"))
        self.actionRobinson.triggered.connect(self.Robert)
        self.actionLaplacien.setText(_translate("MainWindow", "Laplacien"))
        self.actionErosion.setText(_translate("MainWindow", "Erosion"))
        self.actionDilatation.setText(_translate("MainWindow", "Dilatation"))
        self.actionDilatation.triggered.connect(self.dilatation)
        self.actionOuverture.setText(_translate("MainWindow", "Ouverture"))
        self.actionOuverture.triggered.connect(self.ouverture)
        self.actionFermeture.setText(_translate("MainWindow", "Fermeture"))
        self.actionFermeture.triggered.connect(self.fermeture)
        self.actionCroissance_Reg.setText(_translate("MainWindow", "Croissance de régions"))
        self.actionPartition_Reg.setText(_translate("MainWindow", "Partition de régions"))
        self.actionPartition_Reg.triggered.connect(self.partRegion)
        self.actionMeth_k_means.setText(_translate("MainWindow", "Méthode des k-means"))
        self.actionMeth_k_means.triggered.connect(self.kmeans)

    #cette fonction permet d'ouvrir une image
    def getimage(self):
        filename = QFileDialog.getOpenFileName()
        Ui_MainWindow.path = filename[0]
        pixmap = QtGui.QPixmap(Ui_MainWindow.path)
        print(Ui_MainWindow.path)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_img.setPixmap(pixmap4)

    # def save(self):
    #     pourcentage = int(self.taille.toPlainText())
    #     cv2.imwrite(pourcentage, saveImage)


    def etirement(self):
        M = cv2.imread(Ui_MainWindow.path)
        gray = cv2.cvtColor(M, cv2.COLOR_BGR2GRAY)
        MaxV = np.max(gray)
        MinV = np.min(gray)
        Y = np.zeros_like(gray)
        m = gray.shape
        for i in range(m[0]):
            for j in range(m[1]):
                Y[i, j] = (255 / (MaxV - MinV) * gray[i, j] - MinV)
        random = randint(1, 2000)
        x = "image" + str(random)
        cv2.imwrite("resultats//" + x + ".png", Y)
        pixmap = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #la fonction de filtre moyenneur avec une dimension 3*3
    def Moyenneur3(self):
        image = cv2.imread(Ui_MainWindow.path)
        f = Filtrage(image)
        img = f.Moyenneur(3)
        height, width, byteValue = img.shape
        print(byteValue)
        if byteValue == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def Moyenneur5(self):
        image = cv2.imread(Ui_MainWindow.path)
        f = Filtrage(image)
        img = f.Moyenneur(5)
        height, width, byteValue = img.shape
        print(byteValue)
        if byteValue == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def Moyenneur7(self):
        image = cv2.imread(Ui_MainWindow.path)
        f = Filtrage(image)
        img = f.Moyenneur(7)
        height, width, byteValue = img.shape
        print(byteValue)
        if byteValue == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction de filtre gaussian avec un seuil s = 0.1
    def gaussian1(self):
        image = cv2.imread(Ui_MainWindow.path)
        f = Filtrage(image)
        img = f.Gaussien(0.1)
        height, width, byteValue = img.shape
        print(byteValue)
        if byteValue == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def gaussian8(self):
        image = cv2.imread(Ui_MainWindow.path)
        f = Filtrage(image)
        img = f.Gaussien(0.8)
        height, width, byteValue = img.shape
        print(byteValue)
        if byteValue == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction de filtre median avec une dimension d = 3*3
    def median3(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            f = Filtrage(image)
            img = f.Median(5)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            f = Filtrage(image)
            img = f.Median(5)
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def median5(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            f = Filtrage(image)
            img = f.Median(5)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            f = Filtrage(image)
            img = f.Median(5)
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    # fonction du Gradient
    def grad(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            c = Contours(imag)
            img = c.grad(20)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            c = Contours(image)
            img = c.grad(20)
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction de Robinson
    def Robert(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            c = Contours(imag)
            img = c.Robert(20)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            c = Contours(image)
            img = c.Robert(20)
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction de sobel
    def Sobel(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            c = Contours(imag)
            img = c.Sobel(50)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            c = Contours(image)
            img = c.Sobel(50)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)

        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def laplacien(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            c = Contours(imag)
            img = c.Laplacien(20)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            c = Contours(image)
            img = c.Laplacien(20)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def Erosion(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.Erosion(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.Erosion(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def dilatation(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.dilatation(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.dilatation(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def ouverture(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.Erosion(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.dilatation(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.Erosion(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.dilatation(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def fermeture(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.dilatation(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.Erosion(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.dilatation(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.Erosion(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction qui affiche l'image négative
    def show_negative(self):
        image = cv2.imread(Ui_MainWindow.path)
        img = 255 - image
        # cv2.imshow("image negative", img)
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()
        random = randint(1, 2000)
        print(random)
        x = "image" + str(random)
        cv2.imwrite("resultats//" + x + ".png", img)
        pixmap = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)
        self.image_hist.setVisible(0)

    #fonction qui permet de faire une rotation d'une image selon un angle donné
    def show_rotation(self):
        anglevalue = int(self.angle.toPlainText())
        print(anglevalue)
        image = cv2.imread(Ui_MainWindow.path)
        (h, w) = image.shape[:2]
        center = (w / 2, h / 2)
        M = cv2.getRotationMatrix2D(center, anglevalue, 0.6)
        rotated = cv2.warpAffine(image, M, (h, w))
        # cv2.imshow("image rotation", rotated)
        # cv2.waitKey(0);
        # cv2.destroyAllWindows()  # destroys the window showing image
        random = randint(1, 2000)
        print(random)
        x = "image" + str(random)
        cv2.imwrite("resultats//" + x + ".png", rotated)
        pixmap = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction qui permet de redimensionner une image celon un pourcentage donné
    def show_redimension(self):
        pourcentage = int(self.taille.toPlainText())
        print(pourcentage)
        image = cv2.imread(Ui_MainWindow.path)
        scale_percent = pourcentage
        width = int(image.shape[1] * scale_percent / 100)
        height = int(image.shape[0] * scale_percent / 100)
        dim = (width, height)
        resized = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)
        random = randint(1, 2000)
        print(random)
        x = "image" + str(random)
        cv2.imwrite("resultats//" + x + ".png", resized)
        pixmap = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    # fonction de binarisation par Seuillage manuel
    def binarise(self):
        image_init = cv2.imread(Ui_MainWindow.path)
        gray_image = cv2.cvtColor(image_init, cv2.COLOR_BGR2GRAY)
        # Choisir l'image d'origine
        largeur = int(gray_image.shape[0])
        print('largeur=', largeur)
        hauteur = int(gray_image.shape[1])
        print('hauteur = ', hauteur)  # Affiche la taille de l'image
        for i in range(1, largeur):
            for j in range(1, hauteur):
                if gray_image[i][j] <= 120:
                    gray_image[i][j] = 255
                else:
                    gray_image[i][j] = 0
        random = randint(1, 2000)
        print(random)
        x = "image" + str(random)
        cv2.imwrite("resultats//" + x + ".png", gray_image)
        pixmap = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    # fonction de binarisation par l’algorithme d’Otsu
    def otsu(self):
        image_init = cv2.imread(Ui_MainWindow.path)
        gray = cv2.cvtColor(image_init, cv2.COLOR_BGR2GRAY)
        pixel_number = gray.shape[0] * gray.shape[1]
        mean_weigth = 1.0 / pixel_number
        his, bins = np.histogram(gray, np.arange(0, 257))
        final_thresh = -1
        final_value = -1
        intensity_arr = np.arange(256)

        for t in bins[1:-1]:
            pcb = np.sum(his[:t])
            pcf = np.sum(his[t:])
            Wb = pcb * mean_weigth
            Wf = pcf * mean_weigth
            mub = np.sum(intensity_arr[:t] * his[:t]) / float(pcb)
            muf = np.sum(intensity_arr[t:] * his[t:]) / float(pcf)
            np.seterr(divide='ignore', invalid='ignore')
            value = Wb * Wf * (mub - muf) ** 2
            if value > final_value:
                final_thresh = t
                final_value = value

        final_img = gray.copy()
        final_img[gray > final_thresh] = 255
        final_img[gray < final_thresh] = 0
        random = randint(1, 2000)
        x = "image" + str(random)
        cv2.imwrite("resultats//" + x + ".png", final_img)
        pixmap1 = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap5 = pixmap1.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap5)

    def egalisation(self):
        img = cv2.imread(Ui_MainWindow.path, 0)
        equalise = cv2.equalizeHist(img)
        random = randint(1, 2000)
        print(random)
        x = "image" + str(random)
        cv2.imwrite("resultats//" + x + ".png", equalise)
        pixmap = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap4 = pixmap.scaled(380, 630, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)
        self.image_hist.setVisible(0)

    #fonction qui affiche l'histogramme d'une image
    def histo(self):
        img = cv2.imread(Ui_MainWindow.path, 0)
        hist, bins = np.histogram(img.flatten(), 256, [0, 256])
        cdf = hist.cumsum()
        cdf_normalized = cdf * hist.max() / cdf.max()  # this line not necessary.
        plt.plot(cdf_normalized, color='b')
        plt.hist(img.flatten(), 256, [0, 256], color='r')
        plt.xlim([0, 256])
        random = randint(1, 2000)
        print(random)
        x = "image" + str(random)
        plt.savefig("resultats//" + x + ".png")
        pixmap = QtGui.QPixmap("resultats//" + x + ".png")
        pixmap4 = pixmap.scaled(380, 630, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)
        self.image_hist.setVisible(1)
        self.image_hist.clicked.connect(self.showImg)

    def ouverture(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.Erosion(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.dilatation(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.Erosion(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.dilatation(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    def fermeture(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        print(byteValue)
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.dilatation(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.Erosion(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.dilatation(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.Erosion(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction des k-means
    def kmeans(self):
        image = cv2.imread(Ui_MainWindow.path)
        imag = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        height, width, byteValue = imag.shape
        s = Segmentation(imag)
        img = s.k_means()
        imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    #fonction de partition de régions
    def partRegion(self):
        gray_r = self.image.reshape(self.image.shape[0] * self.image.shape[1])
        for i in range(gray_r.shape[0]):
            if gray_r[i] > gray_r.mean():
                gray_r[i] = 3
            elif gray_r[i] > 0.5:
                gray_r[i] = 2
            elif gray_r[i] > 0.25:
                gray_r[i] = 1
            else:
                gray_r[i] = 0
        gray = gray_r.reshape(self.image.shape[0], self.image.shape[1])
        pixmap = QtGui.QPixmap(gray)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)

    # def partRegion(self):
    #     image = cv2.imread(Ui_MainWindow.path)
    #     imag = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    #     height, width, byteValue = imag.shape
    #     s = Segmentation(imag)
    #     img = s.partition_regions()
    #     imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
    #     pixmap = QtGui.QPixmap(imag)
    #     pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
    #     self.label_affch_rslt.setPixmap(pixmap4)


    ##### selectionner zone #####
    def show_zone(self):
        image = cv2.imread(Ui_MainWindow.path)
        imag = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        height, width, byteValue = imag.shape
        m = crop(imag)
        img = m.main()
        imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap(imag)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.label_affch_rslt.setPixmap(pixmap4)
        
    #fonction qui affiche une image
    def showImg(self):
        show()
        self.image_hist.setVisible(0)

    def close_application(self):
        sys.exit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("Mini-Projet de traitement d'image Réalisé par : Barhrhouj Ayah ")
    MainWindow.setWindowIcon(QtGui.QIcon("images/icon.png"))
    MainWindow.show()
    sys.exit(app.exec_())
